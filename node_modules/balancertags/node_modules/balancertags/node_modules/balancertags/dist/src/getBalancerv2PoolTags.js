// Use dynamic import for node-fetch
import fetch from "node-fetch";
const GET_POOLS_QUERY = `
  query GetPools($lastTimestamp: Int) {
    pools(
      first: 1000,
      orderBy: createTime,
      orderDirection: asc,
      where: { createTime_gt: $lastTimestamp }
    ) {
      address
      createTime
      tokens {
        symbol
        name  
      }
    }
  }
`;
async function returnTags(chainId, apiKey) {
    let lastTimestamp = 0;
    let allTags = [];
    let isMore = true;
    if (chainId !== 1) {
        throw new Error(`Unsupported Chain ID: ${chainId}. This function only supports Ethereum Mainnet.`);
    }
    if (!apiKey || apiKey.length < 20) {
        throw new Error("Invalid API key format.");
    }
    while (isMore) {
        const response = await fetch("https://api.thegraph.com/subgraphs/name/balancer-labs/balancer-v2", {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                Accept: "application/json",
                Authorization: `Bearer ${apiKey}`,
            },
            body: JSON.stringify({
                query: GET_POOLS_QUERY,
                variables: { lastTimestamp: lastTimestamp },
            }),
        });
        if (!response.ok) {
            throw new Error(`Network response was not ok: ${response.statusText}`);
        }
        const result = (await response.json());
        console.log(result.data);
        const pools = result.data.pools;
        allTags.push(...transformPoolsToTags(pools));
        if (pools.length < 1000) {
            isMore = false;
        }
        else {
            // Assuming 'createTime' is now a property on the returned pools, which needs verification
            lastTimestamp = parseInt(pools[pools.length - 1].createTime.toString());
        }
    }
    return allTags;
}
// Adjusted transformation function to match the updated Pool interface
function transformPoolsToTags(pools) {
    return pools.map((pool) => ({
        "Contract Address": pool.address,
        "Public Name Tag": `${pool.tokens
            .map((t) => t.symbol)
            .join("/")} Pool`,
        "Project Name": "Balancer v2",
        "UI/Website Link": "https://balancer.fi/",
        "Public Note": `A Balancer v2 pool with tokens ${pool.tokens
            .map((t) => t.name)
            .join(", ")}.`,
    }));
}
export { returnTags };
